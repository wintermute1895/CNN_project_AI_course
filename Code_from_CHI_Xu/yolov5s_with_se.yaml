# Ultralytics ðŸš€ AGPL-3.0 License - https://ultralytics.com/license
# Parameters
nc: 22 # number of classes
depth_multiple: 0.33 # model depth multiple
width_multiple: 0.50 # layer channel multiple
anchors:
  - [10, 13, 16, 30, 33, 23] # P3/8
  - [30, 61, 62, 45, 59, 119] # P4/16
  - [116, 90, 156, 198, 373, 326] # P5/32

# YOLOv5s v6.0 backbone with SEBlocks (modified by CHI_Xu)
backbone:
  # [from, number, module, args]
  [[-1, 1, Conv, [64, 6, 2, 2]],       # 0: out_ch = 32
   [-1, 1, Conv, [128, 3, 2]],      # 1: out_ch = 64
   [-1, 3, C3, [128]],               # 2: out_ch = 64
   [-1, 1, SEBlock, [64, 16]],       # 3: out_ch = 64
   [-1, 1, Conv, [256, 3, 2]],      # 4: out_ch = 128
   [-1, 6, C3, [256]],               # 5: out_ch = 128  <- P3 features for Neck
   [-1, 1, SEBlock, [128, 16]],      # 6: out_ch = 128
   [-1, 1, Conv, [512, 3, 2]],      # 7: out_ch = 256
   [-1, 9, C3, [512]],               # 8: out_ch = 256  <- P4 features for Neck
   [-1, 1, SEBlock, [256, 16]],      # 9: out_ch = 256
   [-1, 1, Conv, [1024, 3, 2]],     # 10: out_ch = 512
   [-1, 3, C3, [1024]],              # 11: out_ch = 512
   [-1, 1, SPPF, [1024, 5]],       # 12: out_ch = 512  <- P5 features for Neck (Backbone output)
  ]

# YOLOv5s v6.0 head with adjusted 'from' indices
head:
  [
    [-1, 1, Conv, [512, 1, 1]],                 # 13: input from layer 12 (SPPF), actual_out_ch = 512 * 0.5 = 256. (This is P5')
    [-1, 1, nn.Upsample, [None, 2, "nearest"]],   # 14: Upsample P5'
    [[-1, 8], 1, Concat, [1]],                  # 15: Concat with backbone layer 8 (P4 C3 output, 256 channels).
                                                #     Upsampled P5' (256 ch) + Backbone P4 (256 ch) = 512 ch
    [-1, 3, C3, [512, False]],                  # 16: input 512, actual_out_ch = 512 * 0.5 = 256. (This is P4')

    [-1, 1, Conv, [256, 1, 1]],                 # 17: input 256, actual_out_ch = 256 * 0.5 = 128.
    [-1, 1, nn.Upsample, [None, 2, "nearest"]],   # 18: Upsample P4'
    [[-1, 5], 1, Concat, [1]],                  # 19: Concat with backbone layer 5 (P3 C3 output, 128 channels).
                                                #     Upsampled P4' (128 ch) + Backbone P3 (128 ch) = 256 ch
    [-1, 3, C3, [256, False]],                  # 20: input 256, actual_out_ch = 256 * 0.5 = 128. (This is P3') -> Detect Input 0

    [-1, 1, Conv, [256, 3, 2]],                 # 21: input 128, actual_out_ch = 256 * 0.5 = 128. (P3' downsampled for PAN)
    [[-1, 16], 1, Concat, [1]],                 # 22: Concat with head layer 16 (P4', 256 channels).
                                                #     Downsampled P3' (128 ch) + P4' (256 ch) = 384 ch
    [-1, 3, C3, [512, False]],                  # 23: input 384, actual_out_ch = 512 * 0.5 = 256. (This is P4'') -> Detect Input 1

    [-1, 1, Conv, [512, 3, 2]],                 # 24: input 256, actual_out_ch = 512 * 0.5 = 256. (P4'' downsampled for PAN)
    [[-1, 13], 1, Concat, [1]],                 # 25: Concat with head layer 13 (P5', 256 channels).
                                                #     Downsampled P4'' (256 ch) + P5' (256 ch) = 512 ch
    [-1, 3, C3, [1024, False]],                 # 26: input 512, actual_out_ch = 1024 * 0.5 = 512. (This is P5'') -> Detect Input 2

    [[20, 23, 26], 1, Detect, [nc, anchors]],   # Detect(P3', P4'', P5'')
                                                # Inputs from layers 20, 23, 26
  ]