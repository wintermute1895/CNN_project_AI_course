# Ultralytics 🚀 AGPL-3.0 License - https://ultralytics.com/license

# Parameters
nc: 80 # number of classes
depth_multiple: 0.33 # model depth multiple
width_multiple: 0.50 # layer channel multiple
anchors:
  - [10, 13, 16, 30, 33, 23] # P3/8
  - [30, 61, 62, 45, 59, 119] # P4/16
  - [116, 90, 156, 198, 373, 326] # P5/32

# YOLOv5 v6.0 backbone 这部分经过了我们的修改(from CHI_Xu)
backbone:
  # [from, number, module, args]
  [[-1, 1, Conv, [64, 6, 2, 2]],       # 0
   [-1, 1, Conv, [128, 3, 2]],      # 1
   [-1, 3, C3, [128]],               # 2 (输出通道数是 128 * width_multiple = 128 * 0.5 = 64)
   [-1, 1, SEBlock, [64, 16]],       # 3 <-- 我们在这里插入SEBlock，输入通道是64，压缩比是16
   [-1, 1, Conv, [256, 3, 2]],      # 4 (输入来自上一层SEBlock，输出64，所以Conv的输入通道也是64)
                                     # 注意！这里你需要确保SEBlock不改变输出通道数，或者Conv的输入通道数要与之匹配。
                                     # 我们的SEBlock实现是不改变输出通道数的 (c1进, c1出)。
   [-1, 6, C3, [256]],               # 5 (输出通道数是 256 * 0.5 = 128)
   [-1, 1, SEBlock, [128, 16]],      # 6 <-- 再插入一个SEBlock
   [-1, 1, Conv, [512, 3, 2]],      # 7
   [-1, 9, C3, [512]],               # 8 (输出通道数是 512 * 0.5 = 256)
   [-1, 1, SEBlock, [256, 16]],      # 9 <-- 再插入一个SEBlock
   [-1, 1, Conv, [1024, 3, 2]],     # 10
   [-1, 3, C3, [1024]],              # 11
   [-1, 1, SPPF, [1024, 5]],       # 12
  ]


# YOLOv5 v6.0 head
head: [
    [-1, 1, Conv, [512, 1, 1]],
    [-1, 1, nn.Upsample, [None, 2, "nearest"]],
    [[-1, 6], 1, Concat, [1]], # cat backbone P4
    [-1, 3, C3, [512, False]], # 13

    [-1, 1, Conv, [256, 1, 1]],
    [-1, 1, nn.Upsample, [None, 2, "nearest"]],
    [[-1, 4], 1, Concat, [1]], # cat backbone P3
    [-1, 3, C3, [256, False]], # 17 (P3/8-small)

    [-1, 1, Conv, [256, 3, 2]],
    [[-1, 14], 1, Concat, [1]], # cat head P4
    [-1, 3, C3, [512, False]], # 20 (P4/16-medium)

    [-1, 1, Conv, [512, 3, 2]],
    [[-1, 10], 1, Concat, [1]], # cat head P5
    [-1, 3, C3, [1024, False]], # 23 (P5/32-large)

    [[17, 20, 23], 1, Detect, [nc, anchors]], # Detect(P3, P4, P5)
  ]
